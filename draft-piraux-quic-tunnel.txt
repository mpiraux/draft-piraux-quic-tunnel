



TODO Working Group                                        M. Piraux, Ed.
Internet-Draft                                            O. Bonaventure
Intended status: Experimental                                  UCLouvain
Expires: March 9, 2020                                September 06, 2019


                Tunneling Internet protocols inside QUIC
                      draft-piraux-quic-tunnel-00

Abstract

   This document specifies methods for tunneling Internet protocols
   inside a QUIC connection, including TCP, UDP, IP and QUIC flows.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on March 9, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Piraux & Bonaventure      Expires March 9, 2020                 [Page 1]

Internet-Draft                 QUIC Tunnel                September 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Conventions and Definitions . . . . . . . . . . . . . . . . .   3
   3.  Reference environment . . . . . . . . . . . . . . . . . . . .   3
   4.  The datagram mode . . . . . . . . . . . . . . . . . . . . . .   4
   5.  The stream mode . . . . . . . . . . . . . . . . . . . . . . .   4
     5.1.  QUIC tunnel stream TLVs . . . . . . . . . . . . . . . . .   6
       5.1.1.  Connect OK TLV  . . . . . . . . . . . . . . . . . . .   7
       5.1.2.  Error TLV . . . . . . . . . . . . . . . . . . . . . .   7
       5.1.3.  End TLV . . . . . . . . . . . . . . . . . . . . . . .   9
     5.2.  QUIC tunnel port mapping TLVs . . . . . . . . . . . . . .   9
       5.2.1.  Port Mapping Request TLV  . . . . . . . . . . . . . .   9
       5.2.2.  Port Mapping Response TLV . . . . . . . . . . . . . .  10
       5.2.3.  Port Mapping Error TLV  . . . . . . . . . . . . . . .  10
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .  11
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  11
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  11
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  11
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .  13
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  13

1.  Introduction

   Mobile devices such as laptops, smartphones or tablets have different
   requirements than the traditional fixed devices.  These mobile
   devices often change their network attachment.  They are often
   attached to trusted networks, but sometimes they need to be connected
   to untrusted networks where their communications can be eavesdropped,
   filtered or modified.  In these situations, the classical approach is
   to rely on VPN protocols such as DTLS, TLS or IPSec.  These VPN
   protocols provide the encryption and authentication functions to
   protect those mobile clients from malicious behaviors in untrusted
   networks.

   On the other hand, these devices are often multihomed and many expect
   to be able to perform seamless handovers from one access network to
   another without breaking the established VPN sessions.  In some
   situations it can also be beneficial to combine two or more access
   networks together to increase the available host bandwidth.  A
   protocol such as Multipath TCP supports those handovers and allows to
   aggregate the bandwidth of different access links.  It could be
   combined with single-path VPN protocols to support both seamless
   handovers and bandwidth aggregation above VPN tunnels.
   Unfortunately, Multipath is not yet deployed on most Internet servers
   and thus few applications would benefit from such a use case.




Piraux & Bonaventure      Expires March 9, 2020                 [Page 2]

Internet-Draft                 QUIC Tunnel                September 2019


   The QUIC protocol opens up a new way to find a clean solution to this
   problem.  First, QUIC includes the same encryption and authentication
   techniques as deployed VPN protocols.  Second, QUIC is intended to be
   widely used to support web-based services, making it unlikely to be
   filtered in many networks, in contrast with VPN protocols.  Third,
   the multipath extensions proposed for QUIC enable it to efficiently
   support both seamless handovers and bandwidth aggregation.

   In this document, we explore how (Multipath) QUIC could be used to
   enable multipath mobile devices to communicate securely in untrusted
   networks.  More precisely, we explore and compare two different
   designs.  The first, section Section 4, uses the recently proposed
   datagram extension for QUIC to transport plain IP packets over a
   Multipath QUIC connection.  The second, section Section 5, uses the
   QUIC streams to transport TCP bytestreams over a Multipath QUIC
   connection.

   Our starting point for this work is Multipath QUIC that was initially
   proposed in [CoNEXT].  A detailed specification of Multipath QUIC may
   be found in [I-D.deconinck-quic-multipath].  Two implementations of
   different versions of this protocol are available [CoNEXT],
   [SIGCOMM19].

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Reference environment

   We consider a multihomed client that is attached to two different
   access networks.  It establishes a Multipath QUIC connection to a
   concentrator.  This MPQUIC connection is used to carry all the UDP
   and TCP packets sent by the client.  Thanks to the security
   mechanisms used by the Multipath QUIC connection, all the client data
   is protected against attacks in one or both of the access networks.
   The client trusts the concentrator.  The concentrator decrypts the
   frames exchanged over the Multipath QUIC connection and interacts
   with the remote hosts as a VPN concentrator would do.









Piraux & Bonaventure      Expires March 9, 2020                 [Page 3]

Internet-Draft                 QUIC Tunnel                September 2019


               +---------+
          .----| Access  |----.
          |    | network |    |
          |    |    A    |    |
   +--------+  +----------    v                          +-------------+
   | Multi  |              +--------------+              | Final       |
   | homed  |              | Concentrator |===\ ... \===>| destination |
   | client |              +--------------+              | server      |
   +--------+  +---------+    ^                          +-------------+
          |    | Access  |    |
          |    | network |    |            Legend:
          .----|    B    |----.              --- Multipath QUIC subflow
               +---------+                   === TCP/UDP flow

                      Figure 1: Reference environment

   In this version of the document, we focus on client initiated flows.
   A subsequent version will discuss how the client can accept incoming
   UDP flows and TCP connections.

4.  The datagram mode

   Our first mode of operation, called the datagram mode in this
   document, enables the client and the concentrator exchange raw IP
   packets through the Multipath QUIC connection.  This is done by using
   the recently proposed QUIC datagram extension
   [I-D.pauly-quic-datagram].  In a nutshell, to send an IP packet to a
   remote host, the client simply passes the entire packet as a datagram
   to the Multipath QUIC connection established with the concentrator.
   The IP packet is encoded in a QUIC frame, encrypted and authenticated
   in a QUIC packet.  This transmission is subject to congestion
   control, but the datagram that contains the packet is not
   retransmitted in case of losses as specified in
   [I-D.pauly-quic-datagram].

   The datagram mode is intended to provide a similar service as the one
   provided by IPSec tunnels or DTLS.  As IP packets are encoded in QUIC
   frames.

   TODO(ob): Maybe look at MTU issues, because those will appear -> move
   in another part of the document that discusses more details

5.  The stream mode

   The main advantage of the datagram mode is that it supports IP and
   any protocol above the network layer.  Any IP packet can be
   transported using the datagram extension over a Multipath QUIC
   connection.  However, this advantage comes with a large per-packet



Piraux & Bonaventure      Expires March 9, 2020                 [Page 4]

Internet-Draft                 QUIC Tunnel                September 2019


   overhead since each packet contains both a network and a transport
   header.  All these headers must be transmitted in addition with the
   IP/UDP/QUIC headers of the Multipath QUIC connection.  For TCP
   connections, the per-packet overhead can be large.

   Since QUIC support multiple streams, another possibility to carry the
   data exchanged over TCP connections between the client and the
   concentrator is to transport the bytestream of each TCP connection as
   one of the streams of the Multipath QUIC connection.  For this, we
   base our approach on the 0-RTT Converter protocol
   ([I-D.ietf-tcpm-converters]) that was proposed to ease the deployment
   of TCP extensions.  In a nutshell, it is an application proxy that
   converts TCP connections, allowing the use of new TCP extensions
   through an intermediate host.

   We use a similar approach in our stream mode.  When a client (or the
   concentrator) opens a stream, it sends at the beginning of the
   bytestream one or more TLV messages that indicate the IP address and
   port number of the remote destination of the bytestream.  Their
   format is detailed in section TODO.  Upon reception of these TLV
   messages, the concentrator (or the client) opens a TCP connection
   towards the specified destination and connects the incoming
   bytestream of the Multipath QUIC connection to the bytestream of the
   new TCP connection (and similarly in the opposite direction).

   Figure 2 summarizes how the new TCP connection is mapped to the QUIC
   stream.  Actions and events of a TCP connection are translated to
   action and events of a QUIC stream, so that the state transition of
   one is translated to the other.






















Piraux & Bonaventure      Expires March 9, 2020                 [Page 5]

Internet-Draft                 QUIC Tunnel                September 2019


   +------------------+-------------------------+
   |        TCP       |      QUIC Stream        |
   +------------------+-------------------------+
   | SYN received     | Open Stream, send TLVs  |
   | FIN received     | Send Stream FIN         |
   | RST received     | Send STOP_SENDING       |
   |                  | Send RESET_STREAM       |
   | Data received    | Send Stream data        |
   +------------------+-------------------------+

   +-------------------------------+------------+
   |         QUIC Stream           |    TCP     |
   +-------------------------------+------------+
   | Stream opened, TLVs received  | Send SYN   |
   | Stream FIN received           | Send FIN   |
   | STOP_SENDING received         | Send RST   |
   | RESET_STREAM received         | Send RST   |
   | Stream data received          | Send data  |
   +-------------------------------+------------+

              Figure 2: TCP connection to QUIC stream mapping

   The QUIC stream-level flow control can be tuned to match the
   terminated TCP connection receive window size, so that no excessive
   amount of data needs to be buffered.

   A timeout can be associated with a given mapped QUIC stream for its
   associated state to expire when the TCP connection is inactive for a
   long period.

5.1.  QUIC tunnel stream TLVs

   When using the stream mode, a series of messages are used for the
   establishment, the acknowledgment and the reporting of any error for
   the connection to the final destination for a given stream.  This
   section describes the format of these messages.  These messages are
   encoded as TLVs, i.e. (Type, Length, Value) tuples, as illustrated in
   Figure 3.  All TLV fields are encoded in network-byte order.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Type (8)   |   Length (8)  |          [Value (*)]        ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                  Figure 3: QUIC tunnel stream TLV Format

   This document specifies the following QUIC tunnel stream TLVs:



Piraux & Bonaventure      Expires March 9, 2020                 [Page 6]

Internet-Draft                 QUIC Tunnel                September 2019


+------+----------+----------------+
| Type |  Length  | Name           |
+------+----------+----------------+
| 0x00 | 20 bytes | Connect TLV    |
| 0x01 |  2 bytes | Connect OK TLV |
| 0x02 | Variable | Error TLV      |
| 0xff |  2 bytes | End TLV        |
+------+----------+----------------+
~~~~~~~~~~~~~~~~~~~~~~~~~~
{: #tlvs title="QUIC tunnel stream TLVs"}

The Connect TLV is used to establish a connection through the tunnel to the
final destination. The Connect OK TLV is used to signal the successful
establishment of this connection. The Error TLV is used to signal any
out-of-band error that could occur during the connection. Finally, the End TLV
is used to mark then of the series of TLV and the start of the bytestream. All
of these TLVs are detailed in the following sections.

### Connect TLV {#sec-connect-tlv}

The Connect TLV is used to indicate the final destination of a given QUIC
stream. The fields Remote Peer Port and Remote Peer IP Address contain the
destination port number and IP address of the final destination.

The Remote Peer IP Address MUST be encoded as an IPv6 address. IPv4 addresses
MUST be encoded using the IPv4-Mapped IPv6 Address format defined in
{{RFC4291}}. Further, Remote Peer IP address field MUST NOT include multicast,
broadcast, and host loopback addresses {{RFC6890}}.

When opening a QUIC stream, the client MUST send exactly one Connect TLV before
the End TLV.


                 1                   2                   3  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |    Type (8)   |   Length (8)  |     Remote Peer Port (16)     | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                  Remote Peer IP Address (128)                 | |                                                               | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~

                           Figure 4: Connect TLV

5.1.1.  Connect OK TLV

   The Connect OK TLV does not contain a value.  Its existence signals
   the successful establishment of connection to the final destination.

5.1.2.  Error TLV

   The Error TLV is used to transmit out-of-band errors resulting of the
   establishment of the connection to the final destination.  These
   errors can be ICMP Destination Unreachable messages for instance.  In




Piraux & Bonaventure      Expires March 9, 2020                 [Page 7]

Internet-Draft                 QUIC Tunnel                September 2019


   this case the ICMP packet is transmitted inside the Error Payload
   field.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |    Type (8)   |   Length (8)  |        Error Code (16)        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     [Error Payload (*)]                       |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                            Figure 5: Error TLV

   The following bytestream-level error codes are defined in this
   document:

   +------+-----------------+
   | Code | Name            |
   +------+-----------------+
   |  0x0 | Unknown TLV     |
   |  0x1 | ICMP packet     |
   |  0x2 | Malformed TLV   |
   |  0x3 | Network Failure |
   +------+-----------------+

                  Figure 6: Bytestream-level Error Codes

   o  Unknown TLV (0x0): This code indicates that a TLV of unknown type
      was received.  The Error Payload contains the received type value.

   o  ICMP packet (0x1): This code indicates the receipt of an ICMP
      packet this tunneled connection.  The Error Payload contains the
      packet.

   o  Malformed TLV (0x2): This code indicates that a received TLV was
      not successfully parsed or formed.  A peer receiving a Connect TLV
      with an invalid IP address MUST send an Error TLV with this error
      code.

   o  Network Failure (0x3): This codes indicates that a network failure
      prevents the establishment of the connection.

   After sending one or more Error TLVs, the sender MUST send an End TLV
   and terminate the stream, i.e. set the FIN bit after the End TLV.







Piraux & Bonaventure      Expires March 9, 2020                 [Page 8]

Internet-Draft                 QUIC Tunnel                September 2019


5.1.3.  End TLV

   The End TLV does not contain a value.  Its existence signals the end
   of the series of TLVs.  The next byte after this TLV is the start of
   the tunneled bytestream.

5.2.  QUIC tunnel port mapping TLVs

   This document also specifies TLVs to request port mapping at the
   concentrator.  A client can request ports to be opened at the
   concentrator.  Inbound connections for these ports are accepted by
   the concentrator and forwarded to the clients.

   These TLVs MUST be exchanged on the QUIC tunnel control stream.
   TODO(mp): Define this stream.

   TODO(mp): Introduce what for and how they are used somewhere before

   +-------------+----------+---------------------------+
   |        Type |   Length | Name                      |
   +-------------+----------+---------------------------+
   | 0x00 - 0x01 |  4 bytes | Port Mapping Request TLV  |
   | 0x10 - 0x11 | 20 bytes | Port Mapping Response TLV |
   | 0x20 - 0x21 |  5 bytes | Port Mapping Error TLV    |
   +-------------+----------+---------------------------+

                        Figure 7: Port Mapping TLVs

5.2.1.  Port Mapping Request TLV

   The Port Mapping Request TLV is sent by clients to request the
   concentrator to accept inbound connections from remote peers on a
   particular port.  The port is encoded into 16 bits.  This document
   only specifies methods for requesting ports for TCP and UDP.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Type (7)  |P|   Length (8)  |   Suggested Remote Port (16)  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Figure 8: Port Mapping Request TLV

   The P flag indicates whether the port is requested for TCP or UDP
   connections.  A value of 0 is TCP, a value of 1 is UDP






Piraux & Bonaventure      Expires March 9, 2020                 [Page 9]

Internet-Draft                 QUIC Tunnel                September 2019


5.2.2.  Port Mapping Response TLV

   The Port Mapping Response TLV is sent by the concentrator in response
   of a Port Mapping Request TLV.  It indicates the port opened to
   accept connections on behalf of the client.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Type (7)  |P|   Length (8)  |    Actual Remote Port (16)    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               |
   |                  Remote Peer IP Address (128)                 |
   |                                                               |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                    Figure 9: Port Mapping Response TLV

   The P flag indicates whether the port is requested for TCP or UDP
   connections.  A value of 0 is TCP, a value of 1 is UDP.

   The Remote Peer IP Address MUST be encoded as an IPv6 address.  IPv4
   addresses MUST be encoded using the IPv4-Mapped IPv6 Address format
   defined in [RFC4291].  Further, Remote Peer IP address field MUST NOT
   include multicast, broadcast, and host loopback addresses [RFC6890].

5.2.3.  Port Mapping Error TLV

   The Port Mapping Error TLV is sent by the concentrator in response of
   a Port Mapping Request TLV.  It indicates that the concentrator was
   unable to open the suggested port and to provide an alternative port
   for the given protocol.

                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Type (7)  |P|   Length (8)  |   Suggested Remote Port (16)  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Error Code (8)|
   +-+-+-+-+-+-+-+-+

                   Figure 10: Port Mapping Response TLV

   The P flag indicates whether the port is requested for TCP or UDP
   connections.  A value of 0 is TCP, a value of 1 is UDP.  This
   document specifies the following error codes:




Piraux & Bonaventure      Expires March 9, 2020                [Page 10]

Internet-Draft                 QUIC Tunnel                September 2019


   o  Protocol Not Supported (0x00): The protocol requested is not
      supported.

   o  No Port Available (0x01): The concentrator has no more ports to
      open for the client.

   TODO(mp): Specify a mechanism to release ports, or at least set a
   timeout

   TODO(mp): Add a section detailing the connection establishment of the
   QUIC tunnel (ALPN used, QUIC tunnel control stream, transport
   parameters ?).

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document has no IANA actions.

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing
              Architecture", RFC 4291, DOI 10.17487/RFC4291, February
              2006, <https://www.rfc-editor.org/info/rfc4291>.

   [RFC6890]  Cotton, M., Vegoda, L., Bonica, R., Ed., and B. Haberman,
              "Special-Purpose IP Address Registries", BCP 153,
              RFC 6890, DOI 10.17487/RFC6890, April 2013,
              <https://www.rfc-editor.org/info/rfc6890>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

8.2.  Informative References







Piraux & Bonaventure      Expires March 9, 2020                [Page 11]

Internet-Draft                 QUIC Tunnel                September 2019


   [CoNEXT]   De Coninck, Q. and O. Bonaventure, "Multipath QUIC: Design
              and Evaluation", Proceedings of the 13th International
              Conference on emerging Networking EXperiments and
              Technologies (CoNEXT 2017) , December 2017.

   [I-D.deconinck-quic-multipath]
              Coninck, Q. and O. Bonaventure, "Multipath Extensions for
              QUIC (MP-QUIC)", draft-deconinck-quic-multipath-03 (work
              in progress), August 2019.

   [I-D.ietf-lpwan-ipv6-static-context-hc]
              Minaburo, A., Toutain, L., Gomez, C., Barthel, D., and J.
              Zuniga, "Static Context Header Compression (SCHC) and
              fragmentation for LPWAN, application to UDP/IPv6", draft-
              ietf-lpwan-ipv6-static-context-hc-21 (work in progress),
              July 2019.

   [I-D.ietf-tcpm-converters]
              Bonaventure, O., Boucadair, M., Gundavelli, S., Seo, S.,
              and B. Hesmans, "0-RTT TCP Convert Protocol", draft-ietf-
              tcpm-converters-13 (work in progress), October 2019.

   [I-D.pauly-quic-datagram]
              Pauly, T., Kinnear, E., and D. Schinazi, "An Unreliable
              Datagram Extension to QUIC", draft-pauly-quic-datagram-04
              (work in progress), October 2019.

   [RFC3095]  Bormann, C., Burmeister, C., Degermark, M., Fukushima, H.,
              Hannu, H., Jonsson, L-E., Hakenberg, R., Koren, T., Le,
              K., Liu, Z., Martensson, A., Miyazaki, A., Svanbro, K.,
              Wiebke, T., Yoshimura, T., and H. Zheng, "RObust Header
              Compression (ROHC): Framework and four profiles: RTP, UDP,
              ESP, and uncompressed", RFC 3095, DOI 10.17487/RFC3095,
              July 2001, <https://www.rfc-editor.org/info/rfc3095>.

   [RFC3843]  Jonsson, L-E. and G. Pelletier, "RObust Header Compression
              (ROHC): A Compression Profile for IP", RFC 3843,
              DOI 10.17487/RFC3843, June 2004,
              <https://www.rfc-editor.org/info/rfc3843>.

   [RFC4019]  Pelletier, G., "RObust Header Compression (ROHC): Profiles
              for User Datagram Protocol (UDP) Lite", RFC 4019,
              DOI 10.17487/RFC4019, April 2005,
              <https://www.rfc-editor.org/info/rfc4019>.







Piraux & Bonaventure      Expires March 9, 2020                [Page 12]

Internet-Draft                 QUIC Tunnel                September 2019


   [RFC4815]  Jonsson, L-E., Sandlund, K., Pelletier, G., and P. Kremer,
              "RObust Header Compression (ROHC): Corrections and
              Clarifications to RFC 3095", RFC 4815,
              DOI 10.17487/RFC4815, February 2007,
              <https://www.rfc-editor.org/info/rfc4815>.

   [RFC6846]  Pelletier, G., Sandlund, K., Jonsson, L-E., and M. West,
              "RObust Header Compression (ROHC): A Profile for TCP/IP
              (ROHC-TCP)", RFC 6846, DOI 10.17487/RFC6846, January 2013,
              <https://www.rfc-editor.org/info/rfc6846>.

   [SIGCOMM19]
              De Coninck, Q., Michel, F., Piraux, M., Given-Wilson, T.,
              Legay, A., Pereira, O., and O. Bonaventure, "Pluginizing
              QUIC", Proceedings of the ACM Special Interest Group on
              Data Communication , August 2019.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Maxime Piraux (editor)
   UCLouvain

   Email: maxime.piraux@uclouvain.be


   Olivier Bonaventure
   UCLouvain

   Email: olivier.bonaventure@uclouvain.be


















Piraux & Bonaventure      Expires March 9, 2020                [Page 13]
